// TCSS 305 - Spring 2016
// Assignment 5 - PowerPaint

package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JPanel;
import javax.swing.event.MouseInputAdapter;

import shape.PaintShape;
import shape.Pencil;

/**
 * The PowerPaint GUI.
 * 
 * @author Kaitlyn Kinerk
 * @version 1.0
 */
public class DrawingPanel extends JPanel {

    public static final Color INITIAL_DRAW_UW_PURPLE = new Color(51, 0, 111);

    public static final Color INITIAL_FILL_UW_GOLD = new Color(232, 211, 162);

    public static final float INITIAL_BRUSH_WIDTH = 1;

    /** */
    private static final long serialVersionUID = -1966968065678487493L;

    private static final Dimension PREFERRED_SIZE = new Dimension(600, 300);

    private final List<PaintShape> myPreviousShapes;

    private PaintShape myCurrentShape;

    private Color myDrawColor;

    private Color myFillColor;

    private boolean myFillState;

    private float myBrushWidth;

    private boolean myDrawingEnabled;

    public DrawingPanel() {
        super();
        myPreviousShapes = new ArrayList<>();
        myCurrentShape = new Pencil();
        myDrawColor = INITIAL_DRAW_UW_PURPLE;
        myFillColor = INITIAL_FILL_UW_GOLD;
        myFillState = false;
        myBrushWidth = INITIAL_BRUSH_WIDTH;
        myDrawingEnabled = true;

        setUpPanel();

    }

    private void setUpPanel() {
        setPreferredSize(PREFERRED_SIZE);
        setBackground(Color.WHITE);

        final MouseInputAdapter listener = new DrawListener();
        addMouseListener(listener);
        addMouseMotionListener(listener);
    }

    public void setCurrentShape(final PaintShape theShape) {
        myCurrentShape = theShape;
    }

    public PaintShape getCurrentShape() {
        return myCurrentShape;
    }

    public void setFillState(final boolean theState) {
        myFillState = theState;

    }

    public boolean isFilled() {
        return myFillState;
    }

    public List<PaintShape> getPreviousShapes() {
        return myPreviousShapes;
    }

    @Override
    public void paintComponent(final Graphics theGraphics) {

        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;

        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);

        // Draw previous shapes
        for (final PaintShape p : myPreviousShapes) {
            if (p.isFilled()) {
                g2d.setPaint(p.getFillColor());
                g2d.fill(p.getShape());
            }
            g2d.setStroke(new BasicStroke(p.getBrushWidth(), BasicStroke.CAP_ROUND,
                                          BasicStroke.JOIN_MITER));
            g2d.setPaint(p.getDrawColor());
            g2d.draw(p.getShape());

        }

        if (myFillState) {
            g2d.setColor(myFillColor);
            g2d.fill(myCurrentShape.getShape());
        }
        g2d.setStroke(new BasicStroke(myBrushWidth, BasicStroke.CAP_ROUND,
                                      BasicStroke.JOIN_MITER));
        g2d.setPaint(myDrawColor);
        g2d.draw(myCurrentShape.getShape());
    }

    public Color getDrawColor() {
        return myDrawColor;
    }

    public void setDrawColor(final Color theDrawColor) {
        myDrawColor = theDrawColor;
    }

    public Color getFillColor() {
        return myFillColor;
    }

    public void setFillColor(final Color theFillColor) {
        myFillColor = theFillColor;
    }

    public void setDrawingEnabled(final boolean theValue) {
        myDrawingEnabled = theValue;
    }

    private class DrawListener extends MouseInputAdapter {

        @Override
        public void mouseEntered(final MouseEvent theEvent) {
            setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));

        }

        @Override
        public void mousePressed(final MouseEvent theEvent) {
            if (myDrawingEnabled) {
                setUpFields();
                myCurrentShape.setStartPoint(theEvent.getPoint());
                myCurrentShape.setEndPoint(theEvent.getPoint());
                repaint();
            }
        }

        @Override
        public void mouseDragged(final MouseEvent theEvent) {
            if (myDrawingEnabled) {
                myCurrentShape.setEndPoint(theEvent.getPoint());
                repaint();
            }
        }

        @Override
        public void mouseReleased(final MouseEvent theEvent) {
            myCurrentShape.setFillState(myFillState);
            myPreviousShapes.add(myCurrentShape);
            myCurrentShape = myCurrentShape.createNew();
            firePropertyChange("clear", null, "");
        }

        private void setUpFields() {
            myCurrentShape.setDrawColor(myDrawColor);
            myCurrentShape.setFillColor(myFillColor);
            myCurrentShape.setFillState(myFillState);
            myCurrentShape.setBrushWidth(myBrushWidth);

        }

    }

    public void setBrushWidth(final float theWidth) {
        myBrushWidth = theWidth;

    }
}
