/**
 * 
 */
package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.util.List;
import java.awt.Cursor;

import javax.swing.JPanel;
import javax.swing.event.MouseInputAdapter;

import model.Line;
import model.PaintShape;
import model.Pencil;

/**
 * @author Kaitlyn
 *
 */
public class DrawingPanel extends JPanel {
    
    /**
     * 
     */
    private static final long serialVersionUID = -1966968065678487493L;

    private static final Color UW_PURPLE = new Color(51, 0, 111);
    
    private static final Color UW_GOLD = new Color(232, 211, 162);
    
    private static final BasicStroke INITIAL_STROKE = new BasicStroke(1);
    
    private static final Dimension PREFERRED_SIZE = new Dimension(600, 300);

    private Stroke myThickness;
    
    private List<Shape> myPreviousShapes;
    
    private PaintShape myCurrentShape;
    
    
    
    public DrawingPanel() {
        super();
        myPreviousShapes = new ArrayList<>();
        
        myThickness = INITIAL_STROKE;
        setPreferredSize(PREFERRED_SIZE);
        setBackground(Color.WHITE);

        
        final MouseInputAdapter listener = new DrawListener();
        addMouseListener(listener);
        addMouseMotionListener(listener);
    }
    
    public void setCurrentShape(PaintShape theShape) {
        myCurrentShape = theShape;
    }
    
    @Override 
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setPaint(UW_PURPLE);
        g2d.setStroke(myThickness);

        // Draw previous shapes
        for (final Shape s : myPreviousShapes) {
            g2d.draw(s);
        }
        
        g2d.draw(myCurrentShape.getShape());
    }
    
    private class DrawListener extends MouseInputAdapter {
        
        @Override
        public void mouseEntered(final MouseEvent theEvent) {
            setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
            
        }


        @Override
        public void mousePressed(final MouseEvent theEvent) {
            myCurrentShape.setStartPoint(theEvent.getPoint());
            repaint();
        }
        
        @Override 
        public void mouseDragged(final MouseEvent theEvent) {
           
            myCurrentShape.setEndPoint(theEvent.getPoint());
            repaint();
        }

        @Override
        public void mouseReleased(final MouseEvent theEvent) {
            
            myPreviousShapes.add(myCurrentShape.getShape());
   
        }
        
    }


    

    
    
}
